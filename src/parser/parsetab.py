
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AS CLASS COLON COMMA DEF DIVIDE ELSE EQUALS FALSE FOR FROM IDENTIFIER IF IMPORT IN LPAREN MINUS NEWLINE NONE NUMBER PLUS PRINT RANGE RETURN RPAREN STRING TIMES TRUE WHILEprogram : statementsstatements : statements statementstatements : statementstatement : DEF IDENTIFIER LPAREN params RPAREN COLON NEWLINEstatement : expression\n                 | expression NEWLINEparams : params COMMA IDENTIFIERparams : IDENTIFIERparams : expression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expressionexpression : NUMBERexpression : IDENTIFIERexpression : IDENTIFIER LPAREN args RPARENexpression : PRINT LPAREN args RPARENexpression : STRINGargs : args COMMA expressionargs : expressionargs : '
    
_lr_action_items = {'DEF':([0,2,3,5,6,7,9,10,13,22,23,24,25,29,31,37,],[4,4,-3,-15,-5,-14,-18,-2,-6,-10,-11,-12,-13,-16,-17,-4,]),'NUMBER':([0,2,3,5,6,7,9,10,12,13,14,15,16,17,18,22,23,24,25,29,30,31,37,],[7,7,-3,-15,-5,-14,-18,-2,7,-6,7,7,7,7,7,-10,-11,-12,-13,-16,7,-17,-4,]),'IDENTIFIER':([0,2,3,4,5,6,7,9,10,12,13,14,15,16,17,18,19,22,23,24,25,29,30,31,33,37,],[5,5,-3,11,-15,-5,-14,-18,-2,5,-6,5,5,5,5,5,27,-10,-11,-12,-13,-16,5,-17,36,-4,]),'PRINT':([0,2,3,5,6,7,9,10,12,13,14,15,16,17,18,22,23,24,25,29,30,31,37,],[8,8,-3,-15,-5,-14,-18,-2,8,-6,8,8,8,8,8,-10,-11,-12,-13,-16,8,-17,-4,]),'STRING':([0,2,3,5,6,7,9,10,12,13,14,15,16,17,18,22,23,24,25,29,30,31,37,],[9,9,-3,-15,-5,-14,-18,-2,9,-6,9,9,9,9,9,-10,-11,-12,-13,-16,9,-17,-4,]),'$end':([1,2,3,5,6,7,9,10,13,22,23,24,25,29,31,37,],[0,-1,-3,-15,-5,-14,-18,-2,-6,-10,-11,-12,-13,-16,-17,-4,]),'NEWLINE':([5,6,7,9,22,23,24,25,29,31,35,],[-15,13,-14,-18,-10,-11,-12,-13,-16,-17,37,]),'PLUS':([5,6,7,9,21,22,23,24,25,29,31,34,],[-15,14,-14,-18,14,14,14,14,14,-16,-17,14,]),'MINUS':([5,6,7,9,21,22,23,24,25,29,31,34,],[-15,15,-14,-18,15,15,15,15,15,-16,-17,15,]),'TIMES':([5,6,7,9,21,22,23,24,25,29,31,34,],[-15,16,-14,-18,16,16,16,16,16,-16,-17,16,]),'DIVIDE':([5,6,7,9,21,22,23,24,25,29,31,34,],[-15,17,-14,-18,17,17,17,17,17,-16,-17,17,]),'RPAREN':([5,7,9,12,18,19,20,21,22,23,24,25,26,27,28,29,31,34,36,],[-15,-14,-18,-21,-21,-9,29,-20,-10,-11,-12,-13,31,-8,32,-16,-17,-19,-7,]),'COMMA':([5,7,9,12,18,19,20,21,22,23,24,25,26,27,28,29,31,34,36,],[-15,-14,-18,-21,-21,-9,30,-20,-10,-11,-12,-13,30,-8,33,-16,-17,-19,-7,]),'LPAREN':([5,8,11,],[12,18,19,]),'COLON':([32,],[35,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statements':([0,],[2,]),'statement':([0,2,],[3,10,]),'expression':([0,2,12,14,15,16,17,18,30,],[6,6,21,22,23,24,25,21,34,]),'args':([12,18,],[20,26,]),'params':([19,],[28,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statements','program',1,'p_program','parser.py',21),
  ('statements -> statements statement','statements',2,'p_statements_multiple','parser.py',25),
  ('statements -> statement','statements',1,'p_statements_single','parser.py',29),
  ('statement -> DEF IDENTIFIER LPAREN params RPAREN COLON NEWLINE','statement',7,'p_statement_func','parser.py',33),
  ('statement -> expression','statement',1,'p_statement_expr','parser.py',37),
  ('statement -> expression NEWLINE','statement',2,'p_statement_expr','parser.py',38),
  ('params -> params COMMA IDENTIFIER','params',3,'p_params_multiple','parser.py',42),
  ('params -> IDENTIFIER','params',1,'p_params_single','parser.py',46),
  ('params -> <empty>','params',0,'p_params_empty','parser.py',50),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','parser.py',54),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','parser.py',55),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','parser.py',56),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','parser.py',57),
  ('expression -> NUMBER','expression',1,'p_expression_number','parser.py',61),
  ('expression -> IDENTIFIER','expression',1,'p_expression_var','parser.py',65),
  ('expression -> IDENTIFIER LPAREN args RPAREN','expression',4,'p_expression_call','parser.py',69),
  ('expression -> PRINT LPAREN args RPAREN','expression',4,'p_expression_print','parser.py',73),
  ('expression -> STRING','expression',1,'p_expression_string','parser.py',77),
  ('args -> args COMMA expression','args',3,'p_args_multiple','parser.py',81),
  ('args -> expression','args',1,'p_args_single','parser.py',85),
  ('args -> <empty>','args',0,'p_args_empty','parser.py',89),
]
